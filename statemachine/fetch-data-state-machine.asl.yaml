StartAt: PreparePollerJob
States:
  PreparePollerJob:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    InputPath: "$"
    OutputPath: "$.Payload"
    Parameters:
      FunctionName: "${PreparePayloadFunction}"
      Payload.$: "$"
    Next: ProcessPollerTasks
    Comment: Check the level of parallelism, split requests into chunks and invoke lamndas
    Retry:
    - ErrorEquals: [ "States.Timeout" ]
      IntervalSeconds: 1
      MaxAttempts: 2
      BackoffRate: 1
  ProcessPollerTasks:
    Type: Map
    Next: PollerJobComplete
    InputPath: "$"
    ItemsPath: "$.tasks"
    Parameters:
      task.$: "$$.Map.Item.Value"
      taskStateMap.$: "$.taskStateMap"
      stateStatus.$: "$.taskStateMap.started"
    MaxConcurrency: 2
    Iterator:
      StartAt: FetchPayload
      States:
        Done:
          Type: Pass
          Parameters:
            state.$: "$.stateStatus"
          End: True
        FetchPayload:
          Type: Task
          Resource: arn:aws:states:::lambda:invoke
          OutputPath: "$.Payload"
          Parameters:
            FunctionName: "${FetchPayloadFunction}"
            Payload.$: "$"
          ResultSelector: {
            task.$: $.task,
            status.$: $.stateStatus
          }
          ResultPath:
          Next: Done
          Retry:
          - ErrorEquals: [ "States.Timeout" ]
            IntervalSeconds: 2
            MaxAttempts: 3
            BackoffRate: 2
          Catch:
          - Next: OnFailure
            ResultPath: "$.error"
            ErrorEquals:
            - States.ALL

        OnFailure:
          Type: Pass
          Next: Done
          Parameters:
            taskStateMap.$: "$.taskStateMap"
            task.$: "$.task"
            stateStatus.$: "$.taskStateMap.failed"



  PollerJobComplete:
    Type: Pass
    Comment: Used for result aggregation
    End: true
TimeoutSeconds: 150
